#!/bin/bash

# ``反引号是执行并引用一个命令的执行结果，类似于$(...)
    echo `ls`
    echo $(ls)

echo -e '\033[32m-----------------系统变量--------------------\033[0m'

#系统变量
    # $UID $PWD $PATH
    # $$ 脚本运行的当前进程ID号
    # $! 后台运行的最后一个进程的ID号
    echo $0 #当前文件名
    echo $1 #第一个参数
    echo $2 #第二个参数
    echo $* #所有参数 (不包括文件本身) or $@
    echo $# #所有参数个数 (不包括文件本身)
    echo $? #上一条命令执行状态 0成功
    echo $- #显示Shell使用的当前选项

    #  $* $@   不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）

echo -e '\033[32m-----------------运算符--------------------\033[0m'

#运算符
    num1=2;num2=3
    echo `expr $num1 + $num2`  #表达式和运算符之间要有空格,例如 2+2 是不对的，必须写成 2 + 2
    echo `expr 2 \* 2`  #乘号(*)前边必须加反斜杠(\)才能实现乘法运算；
    echo $(expr 2 + 2)
    #$(())  $[]用于数学计算
    echo $[ num1 * num2 ] #or $[ $num1 * $num2 ]
    echo $((num1 * num2)) #or $(( $num1 * $num2 ))


    #    ==	相等。用于比较两个数字，相同则返回 true。	[ $a == $b ] 返回 false。
    #    !=	不相等。用于比较两个数字，不相同则返回 true。	[ $a != $b ] 返回 true。

    #关系运算符 关系运算符只支持数字，不支持字符串，除非字符串的值是数字
    #        -eq	检测两个数是否相等，相等返回 true。	[ $a -eq $b ] 返回 false。
    #        -ne	检测两个数是否不相等，不相等返回 true。	[ $a -ne $b ] 返回 true。
    #        -gt	检测左边的数是否大于右边的，如果是，则返回 true。	[ $a -gt $b ] 返回 false。
    #        -lt	检测左边的数是否小于右边的，如果是，则返回 true。	[ $a -lt $b ] 返回 true。
    #        -ge	检测左边的数是否大于等于右边的，如果是，则返回 true。	[ $a -ge $b ] 返回 false。
    #        -le	检测左边的数是否小于等于右边的，如果是，则返回 true。	[ $a -le $b ] 返回 true。

    #字符串运算符
    #    =	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
    #    !=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
    #    -z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
    #    -n	检测字符串长度是否为0，不为0返回 true。	[ -n "$a" ] 返回 true。
    #    $	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。

    #文件测试运算符
echo  '\033[32m-------------------------------------\033[0m'

# 条件语句 条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。
#if []   也可以使用if(())  #同一行多个命令要加;
# []  (())区别是(())可以使用>  <  符号
    a=100
    b=200
    if(($a<$b));then
        echo '这是(())用法'
    fi
    if [ $a -gt 5 -a $b -gt 5 ];then
        echo '布尔运算'
    fi

echo  '\033[32m-----------------逻辑运算符--------------------\033[0m'

    #逻辑运算符
    #        &&	逻辑的 AND	[[ $a -lt 100 && $b -gt 100 ]] 返回 false
    #        ||	逻辑的 OR	[[ $a -lt 100 || $b -gt 100 ]] 返回 true
    if [ $a -gt 10 ] && [ $b -gt 10 ];then
        echo '逻辑运算符';
    fi
        #或者简写
    if [[ $a -gt 10 && $b -gt 10 ]];then
        echo '逻辑运算符';
    fi

